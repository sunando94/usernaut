/*
Copyright 2025.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package main

import (
	"context"
	"crypto/tls"
	"encoding/json"
	"flag"
	"fmt"
	"os"
	"sync"

	// Import all Kubernetes client auth plugins (e.g. Azure, GCP, OIDC, etc.)
	// to ensure that exec-entrypoint and run can make use of them.
	_ "k8s.io/client-go/plugin/pkg/client/auth"

	"k8s.io/apimachinery/pkg/runtime"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	clientgoscheme "k8s.io/client-go/kubernetes/scheme"
	ctrl "sigs.k8s.io/controller-runtime"
	k8sCache "sigs.k8s.io/controller-runtime/pkg/cache"
	"sigs.k8s.io/controller-runtime/pkg/healthz"
	"sigs.k8s.io/controller-runtime/pkg/log/zap"
	"sigs.k8s.io/controller-runtime/pkg/metrics/filters"
	metricsserver "sigs.k8s.io/controller-runtime/pkg/metrics/server"
	"sigs.k8s.io/controller-runtime/pkg/webhook"

	usernautdevv1alpha1 "github.com/redhat-data-and-ai/usernaut/api/v1alpha1"
	"github.com/redhat-data-and-ai/usernaut/internal/controller"
	"github.com/redhat-data-and-ai/usernaut/pkg/cache"
	"github.com/redhat-data-and-ai/usernaut/pkg/clients"
	"github.com/redhat-data-and-ai/usernaut/pkg/clients/ldap"
	"github.com/redhat-data-and-ai/usernaut/pkg/config"
	"github.com/redhat-data-and-ai/usernaut/pkg/logger"
	"github.com/sirupsen/logrus"

	// +kubebuilder:scaffold:imports
	"github.com/redhat-data-and-ai/usernaut/internal/httpapi/server"
)

var (
	scheme   = runtime.NewScheme()
	setupLog = ctrl.Log.WithName("setup")
)

func init() {

	// initializing custom logger
	logger.Init()

	utilruntime.Must(clientgoscheme.AddToScheme(scheme))

	utilruntime.Must(usernautdevv1alpha1.AddToScheme(scheme))
	// +kubebuilder:scaffold:scheme
}

func main() {
	var metricsAddr string
	var enableLeaderElection bool
	var probeAddr string
	var secureMetrics bool
	var enableHTTP2 bool
	var tlsOpts []func(*tls.Config)
	flag.StringVar(&metricsAddr, "metrics-bind-address", "0", "The address the metrics endpoint binds to. "+
		"Use :8443 for HTTPS or :8080 for HTTP, or leave as 0 to disable the metrics service.")
	flag.StringVar(&probeAddr, "health-probe-bind-address", ":8081", "The address the probe endpoint binds to.")
	flag.BoolVar(&enableLeaderElection, "leader-elect", false,
		"Enable leader election for controller manager. "+
			"Enabling this will ensure there is only one active controller manager.")
	flag.BoolVar(&secureMetrics, "metrics-secure", true,
		"If set, the metrics endpoint is served securely via HTTPS. Use --metrics-secure=false to use HTTP instead.")
	flag.BoolVar(&enableHTTP2, "enable-http2", false,
		"If set, HTTP/2 will be enabled for the metrics and webhook servers")
	opts := zap.Options{
		Development: false,
	}
	opts.BindFlags(flag.CommandLine)
	flag.Parse()

	ctrl.SetLogger(zap.New(zap.UseFlagOptions(&opts)))

	// if the enable-http2 flag is false (the default), http/2 should be disabled
	// due to its vulnerabilities. More specifically, disabling http/2 will
	// prevent from being vulnerable to the HTTP/2 Stream Cancellation and
	// Rapid Reset CVEs. For more information see:
	// - https://github.com/advisories/GHSA-qppj-fm5r-hxr3
	// - https://github.com/advisories/GHSA-4374-p667-p6c8
	disableHTTP2 := func(c *tls.Config) {
		setupLog.Info("disabling http/2")
		c.NextProtos = []string{"http/1.1"}
	}

	if !enableHTTP2 {
		tlsOpts = append(tlsOpts, disableHTTP2)
	}

	webhookServer := webhook.NewServer(webhook.Options{
		TLSOpts: tlsOpts,
	})

	// Metrics endpoint is enabled in 'config/default/kustomization.yaml'. The Metrics options configure the server.
	// More info:
	// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.19.0/pkg/metrics/server
	// - https://book.kubebuilder.io/reference/metrics.html
	metricsServerOptions := metricsserver.Options{
		BindAddress:   metricsAddr,
		SecureServing: secureMetrics,
		// TODO(user): TLSOpts is used to allow configuring the TLS config used for the server. If certificates are
		// not provided, self-signed certificates will be generated by default. This option is not recommended for
		// production environments as self-signed certificates do not offer the same level of trust and security
		// as certificates issued by a trusted Certificate Authority (CA). The primary risk is potentially allowing
		// unauthorized access to sensitive metrics data. Consider replacing with CertDir, CertName, and KeyName
		// to provide certificates, ensuring the server communicates using trusted and secure certificates.
		TLSOpts: tlsOpts,
	}

	if secureMetrics {
		// FilterProvider is used to protect the metrics endpoint with authn/authz.
		// These configurations ensure that only authorized users and service accounts
		// can access the metrics endpoint. The RBAC are configured in 'config/rbac/kustomization.yaml'. More info:
		// https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.19.0/pkg/metrics/filters#WithAuthenticationAndAuthorization
		metricsServerOptions.FilterProvider = filters.WithAuthenticationAndAuthorization
	}

	watchedNs := os.Getenv("WATCHED_NAMESPACE")
	if watchedNs == "" {
		watchedNs = "usernaut"
	}

	mgr, err := ctrl.NewManager(ctrl.GetConfigOrDie(), ctrl.Options{
		Scheme:                 scheme,
		Metrics:                metricsServerOptions,
		WebhookServer:          webhookServer,
		HealthProbeBindAddress: probeAddr,
		LeaderElection:         enableLeaderElection,
		LeaderElectionID:       "dd1e5158.operator.dataverse.redhat.com",
		Cache: k8sCache.Options{
			DefaultNamespaces: map[string]k8sCache.Config{
				watchedNs: {},
			},
		},
		// LeaderElectionReleaseOnCancel defines if the leader should step down voluntarily
		// when the Manager ends. This requires the binary to immediately end when the
		// Manager is stopped, otherwise, this setting is unsafe. Setting this significantly
		// speeds up voluntary leader transitions as the new leader don't have to wait
		// LeaseDuration time first.
		//
		// In the default scaffold provided, the program ends immediately after
		// the manager stops, so would be fine to enable this option. However,
		// if you are doing or is intended to do any operation such as perform cleanups
		// after the manager stops then its usage might be unsafe.
		// LeaderElectionReleaseOnCancel: true,
	})
	if err != nil {
		setupLog.Error(err, "unable to start manager")
		os.Exit(1)
	}

	appConf, err := config.GetConfig()
	if err != nil {
		setupLog.Error(err, "unable to create config")
		os.Exit(1)
	}

	ldapConn, err := ldap.InitLdap(appConf.LDAP)
	if err != nil {
		setupLog.Error(err, "failed to initialize LDAP connection")
		os.Exit(1)
	}

	cache, err := cache.New(&appConf.Cache)
	if err != nil {
		setupLog.Error(err, "failed to initialize cache")
	}

	if err = preloadCache(*appConf, cache); err != nil {
		setupLog.Error(err, "failed to preload cache")
		os.Exit(1)
	}

	// Create shared cache mutex to prevent race conditions between GroupReconciler and UserOffboardingJob
	sharedCacheMutex := &sync.RWMutex{}

	if err = (&controller.GroupReconciler{
		Client:     mgr.GetClient(),
		Scheme:     mgr.GetScheme(),
		AppConfig:  appConf,
		Cache:      cache,
		LdapConn:   ldapConn,
		CacheMutex: sharedCacheMutex,
	}).SetupWithManager(mgr); err != nil {
		setupLog.Error(err, "unable to create controller", "controller", "Group")
		os.Exit(1)
	}

	// Initialize backend clients for the periodic tasks
	backendClients := make(map[string]clients.Client)
	for _, backend := range appConf.Backends {
		if backend.Enabled {
			client, err := clients.New(backend.Name, backend.Type, appConf.BackendMap)
			if err != nil {
				setupLog.Error(err, "failed to initialize backend client for periodic tasks",
					"backend", backend.Name, "type", backend.Type)
				os.Exit(1)
			}
			backendClients[fmt.Sprintf("%s_%s", backend.Name, backend.Type)] = client
		}
	}

	ptr, err := controller.NewPeriodicTasksReconciler(mgr.GetClient(), sharedCacheMutex, cache, ldapConn, backendClients)
	if err != nil {
		setupLog.Error(err, "unable to create controller", "controller", "PeriodicTasks")
		os.Exit(1)
	}
	if err = ptr.AddToManager(mgr); err != nil {
		setupLog.Error(err, "unable to add controller to manager", "controller", "PeriodicTasks")
		os.Exit(1)
	}
	// +kubebuilder:scaffold:builder

	if err := mgr.AddHealthzCheck("healthz", healthz.Ping); err != nil {
		setupLog.Error(err, "unable to set up health check")
		os.Exit(1)
	}
	if err := mgr.AddReadyzCheck("readyz", healthz.Ping); err != nil {
		setupLog.Error(err, "unable to set up ready check")
		os.Exit(1)
	}

	apiServer := server.NewAPIServer(appConf)
	go func() {
		if err := apiServer.Start(); err != nil {
			setupLog.Error(err, "failed to start HTTP API server")
			os.Exit(1)
		}
	}()
	setupLog.Info("starting manager")
	if err := mgr.Start(ctrl.SetupSignalHandler()); err != nil {
		setupLog.Error(err, "problem running manager")
		os.Exit(1)
	}
}

// Preload the cache with all the users and teams from the backends
// This is done to avoid hitting the backend for every request
// and to improve the performance of the application
// This is done only once at the start of the application
// and the cache is flushed when the application is restarted
func preloadCache(appConfig config.AppConfig, store cache.Cache) error {

	ctx := context.Background()

	for _, backend := range appConfig.Backends {
		log := logger.Logger(ctx).
			WithFields(logrus.Fields{
				"backend":   backend.Name,
				"type":      backend.Type,
				"component": "preloadCache",
			})

		// don't preload the cache in case of a disabled backend
		if !backend.Enabled {
			log.Warn("Backend is disabled, skipping preload")
			continue
		}

		log.Info("preloading cache with users and teams from backend")

		backendClient, err := clients.New(backend.Name, backend.Type, appConfig.BackendMap)
		if err != nil {
			log.WithError(err).Error("failed to create backend client")
			return err
		}

		// Fetch all the users and store them in the cache
		users, _, err := backendClient.FetchAllUsers(ctx)
		if err != nil {
			log.WithError(err).Error("failed to fetch users from backend")
			return err
		}
		for _, user := range users {
			userMap := make(map[string]string)
			userInCache, err := store.Get(ctx, user.GetEmail())
			// if user is already in the cache, we will update the user details
			// with the new user ID from the backend
			if err == nil {
				// process user details
				err = json.Unmarshal([]byte(userInCache.(string)), &userMap)
				if err != nil {
					log.WithError(err).Error("failed to unmarshal user details from cache")
					return err
				}
			}
			userMap[backend.Name+"_"+backend.Type] = user.ID
			newUserValue, err := json.Marshal(userMap)
			if err != nil {
				log.WithError(err).Error("failed to marshal user details to JSON")
				return err
			}
			// Store the user in the cache with email as key
			// and user ID as value
			// This is done to avoid hitting the backend for every request
			// and to improve the performance of the application
			// The user ID is stored in the cache as a JSON string
			// so that it can be easily retrieved later
			// The user ID is stored in the cache with the backend name and type as key
			err = store.Set(ctx, user.Email, string(newUserValue), cache.NoExpiration)
			if err != nil {
				log.WithError(err).Error("failed to store user in cache")
				return err
			}
		}

		// Fetch all the teams and store them in the cache
		teams, err := backendClient.FetchAllTeams(ctx)
		if err != nil {
			log.WithError(err).Error("failed to fetch teams from backend")
			return err
		}
		for _, team := range teams {
			teamMap := make(map[string]string)
			teamInCache, err := store.Get(ctx, team.GetName())
			// if team is already in the cache, we will update the team details
			// with the new team ID from the backend
			if err == nil {
				// process user details
				err = json.Unmarshal([]byte(teamInCache.(string)), &teamMap)
				if err != nil {
					log.WithError(err).Error("failed to unmarshal team details from cache")
					return err
				}
			}
			teamMap[backend.Name+"_"+backend.Type] = team.ID
			newTeamValue, err := json.Marshal(teamMap)
			if err != nil {
				log.WithError(err).Error("failed to marshal team details to JSON")
				return err
			}

			// Store the team in the cache with name as key
			// and team ID as value
			// This is done to avoid hitting the backend for every request
			// and to improve the performance of the application
			// The team ID is stored in the cache as a JSON string
			// so that it can be easily retrieved later
			// The team ID is stored in the cache with the backend name and type as key
			err = store.Set(ctx, team.Name, string(newTeamValue), cache.NoExpiration)
			if err != nil {
				log.WithError(err).Error("failed to store team in cache")
				return err
			}
		}
		log.WithFields(logrus.Fields{
			"users": len(users),
			"teams": len(teams),
		}).Debug("fetched users and teams from backend")
	}
	return nil
}
